name: Test Kyverno Policy with Kind

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test-kyverno-policy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Kind
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # Create Kind cluster with more resources
      - name: Create Kind cluster with more resources
        run: |
          cat <<EOF | kind create cluster --name kyverno-test --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  system-reserved: memory=2Gi
            extraMounts:
            - hostPath: /var/run/docker.sock
              containerPath: /var/run/docker.sock
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
          EOF
          kubectl cluster-info --context kind-kyverno-test

      # Check node status
      - name: Check node status
        run: |
          echo "Checking node status..."
          kubectl get nodes -o wide
          NODE_STATUS=$(kubectl get nodes -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}')
          if [ "$NODE_STATUS" != "True" ]; then
            echo "Node is not ready. Checking node logs for debugging..."
            docker ps
            docker logs $(docker ps -q --filter "name=kyverno-test-control-plane")
            exit 1
          fi

      # Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # Install Kyverno with debug
      - name: Install Kyverno with debug
        run: |
          helm repo add kyverno https://kyverno.github.io/kyverno/
          helm repo update
          helm install kyverno kyverno/kyverno -n kyverno --create-namespace \
            --set replicaCount=1 \
            --set image.tag=v1.10.0 \
            --set extraArgs="{--debug,--logLevel=4}" \
            --wait --timeout 5m

          # Debug: Show deployment status
          kubectl get deployments -n kyverno -o wide
          kubectl describe deployment -n kyverno kyverno

      # Verify Kyverno installation
      - name: Verify Kyverno installation
        run: |
          # Check pod status and logs
          kubectl get pods -n kyverno -l app.kubernetes.io/name=kyverno
          if [ "$(kubectl get pods -n kyverno -l app.kubernetes.io/name=kyverno --no-headers | wc -l)" -eq 0 ]; then
            echo "Error: No Kyverno pods found. Checking events for debugging..."
            kubectl get events -n kyverno --sort-by=.metadata.creationTimestamp
            kubectl describe pods -n kyverno
            exit 1
          fi
          kubectl logs -n kyverno -l app.kubernetes.io/name=kyverno --tail=50

      # Create Secret for Cosign public key
      - name: Create Secret for Cosign public key
        run: |
          echo "-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE...
-----END PUBLIC KEY-----" > cosign.pub
          kubectl create secret generic cosign-public-key --from-file=cosign.pub=./cosign.pub

      # Apply Kyverno policy
      - name: Apply Kyverno policy
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: kyverno.io/v1
          kind: ClusterPolicy
          metadata:
            name: verify-image-signatures
          spec:
            validationFailureAction: enforce
            background: false
            rules:
              - name: check-image-signature
                match:
                  any:
                  - resources:
                      kinds:
                        - Pod
                preconditions:
                  all:
                  - key: "{{ request.object.spec.containers[].image }}"
                    operator: AnyIn
                    value:
                      - ghcr.io/it-life1/** # Проверяем только образы из этого репозитория
                validate:
                  message: "Image is not signed or signature verification failed."
                  foreach:
                  - list: "request.object.spec.containers"
                    context:
                      - name: imageData
                        imageRegistry:
                          reference: "{{ element.image }}"
                          secret: cosign-public-key
                    deny:
                      conditions:
                        all:
                        - key: "{{ imageData.signatureVerified }}"
                          operator: Equals
                          value: false
          EOF

      # Deploy signed image (should succeed)
      - name: Deploy signed image
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: signed-deployment
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: signed
            template:
              metadata:
                labels:
                  app: signed
              spec:
                containers:
                - name: signed-container
                  image: ghcr.io/it-life1/dockertesting:signed-tag
          EOF
          kubectl wait --for=condition=available deployment/signed-deployment --timeout=300s

      # Deploy unsigned image (should fail)
      - name: Deploy unsigned image
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: unsigned-deployment
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: unsigned
            template:
              metadata:
                labels:
                  app: unsigned
              spec:
                containers:
                - name: unsigned-container
                  image: ghcr.io/it-life1/dockertesting:unsigned-tag
          EOF
          sleep 10 # Wait for Kyverno to block the deployment
          kubectl get pods -l app=unsigned || echo "Unsigned deployment blocked as expected"

      # Cleanup Kind cluster
      - name: Cleanup Kind cluster
        if: always()
        run: |
          kind delete cluster --name kyverno-test
