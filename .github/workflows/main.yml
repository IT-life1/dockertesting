name: Test Kyverno Policy with Kind

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test-kyverno-policy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Kind
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # Create optimized Kind cluster
      - name: Create optimized Kind cluster
        run: |
          cat <<EOF | kind create cluster --name kyverno-test --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  system-reserved: memory=2Gi,cpu=500m
                  eviction-hard: memory.available<500Mi
            extraMounts:
            - hostPath: /var/run/docker.sock
              containerPath: /var/run/docker.sock
          EOF
          kubectl cluster-info --context kind-kyverno-test

      # Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # Install Kyverno with diagnostics
      - name: Install Kyverno with diagnostics
        run: |
          helm repo add kyverno https://kyverno.github.io/kyverno/
          helm repo update
          helm install kyverno kyverno/kyverno -n kyverno --create-namespace \
            --set replicaCount=1 \
            --set image.tag=v1.10.0 \
            --set extraArgs="{--debug,--logLevel=4}" \
            --wait --timeout 5m

          kubectl get pods -n kyverno -o wide
          kubectl logs -n kyverno -l app.kubernetes.io/name=kyverno --tail=50

      # Apply verification policy with inline public key
      - name: Apply verification policy
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: kyverno.io/v1
          kind: ClusterPolicy
          metadata:
            name: verify-image-signatures
          spec:
            validationFailureAction: enforce
            background: false
            rules:
            - name: verify-image
              match:
                any:
                - resources:
                    kinds: [Pod]
              verifyImages:
              - image: "ghcr.io/it-life1/*"
                key: |
                  -----BEGIN PUBLIC KEY-----
                  MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExPrhWufkKkQjMyMW6vUaHw97id+m
                  UoIIbDtp0h3LnoBSF7XSSfvAy9Vcg/BZbJvgHRsf9ymU7iT9ucztqnF3oQ==
                  -----END PUBLIC KEY-----
          EOF

      - name: Test signed image
        run: |
          # Create the signed-test Pod
          kubectl run signed-test \
            --image=ghcr.io/it-life1/dockertesting:main \
            --restart=Never \
            --dry-run=server -o yaml | kubectl apply -f -
      
          # Wait for the Pod to become Ready
          timeout=60
          interval=5
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            POD_STATUS=$(kubectl get pod signed-test -o jsonpath='{.status.phase}')
            if [ "$POD_STATUS" == "Running" ]; then
              echo "Pod is Running!"
              break
            fi
            echo "Waiting for Pod to become Ready... Current status: $POD_STATUS"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
      
          if [ "$POD_STATUS" != "Running" ]; then
            echo "Error: Pod did not become Running within $timeout seconds."
            echo "Pod description:"
            kubectl describe pod signed-test
            echo "Pod logs:"
            kubectl logs signed-test || echo "No logs available."
            echo "Cluster events:"
            kubectl get events --sort-by=.metadata.creationTimestamp
            echo "Kyverno logs:"
            kubectl logs -n kyverno -l app.kubernetes.io/name=kyverno --tail=50
            exit 1
          fi
          
          kubectl logs signed-test
          kubectl describe pod signed-test
          kubectl wait pod/signed-test --for=condition=Ready --timeout=60s

      # Test unsigned image
      - name: Test unsigned image
        run: |
          set +e
          kubectl run unsigned-test \
            --image=ghcr.io/it-life1/dockertesting:latest \
            --restart=Never \
            --dry-run=server -o yaml | kubectl apply -f - 2>/tmp/error.log
          
          if grep -q "signature verification failed" /tmp/error.log; then
            echo "Validation worked as expected"
          else
            echo "Validation failed!"
            exit 1
          fi

      # Cleanup cluster
      - name: Cleanup cluster
        if: always()
        run: |
          kind delete cluster --name kyverno-test
